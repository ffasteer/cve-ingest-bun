import { Db } from "mongodb";
import { CPEIngester } from "./ingesters/cpe/cpe.ts";
import { CPE } from "./ingesters/cpe/type.ts";
import { CVEIngester } from "./ingesters/cve/cve.ts";
import { CVEInfos, UpdateProps } from "./ingesters/cve/type.ts";
import { PersistorFactory } from "./utils/persistor.ts";
import { ExportedCVESearch } from "./utils/types.ts";

export const cpeCollectionName = "cpes";
export const cveCollectionName = "cves";
export const cveInfosCollectionName = "infos";
export const cveInfosOldCompatCollectionName = "info";

export type OldCompatCVEInfos = {
  db: string;
  "last-modified": Date;
};

export class DataIngester<DatabaseName extends string> {
  databaseName: DatabaseName;
  factory: PersistorFactory;
  opened = true;
  db?: Db;

  constructor(client: PersistorFactory, databaseName: DatabaseName, db?: Db) {
    this.factory = client;
    this.databaseName = databaseName;
    this.db = db;
  }

  protected getCPEPersistor = async () => {
    const persistor = await this.factory.make(
      this.databaseName,
      cpeCollectionName,
      (cpe: CPE) => ({ id: cpe.id }),
    );
    return persistor;
  };

  protected getCVEPersistor = async () => {
    const cvePersistor = await this.factory.make(
      this.databaseName,
      cveCollectionName,
      (cve: ExportedCVESearch) => ({ id: cve.id }),
    );
    return cvePersistor;
  };

  protected getOldCompatCveInfoPersistor = async () => {
    const cvePersistor = await this.factory.make(
      this.databaseName,
      cveInfosOldCompatCollectionName,
      (info: OldCompatCVEInfos) => ({ db: info.db }),
    );
    return cvePersistor;
  };

  /**
   * Gets all the cpe matches from NVD and puts them in the mongo db
   */
  async populateCPE() {
    const persistor = await this.getCPEPersistor();
    await persistor.open();
    const infosPersistor = await this.getOldCompatCveInfoPersistor();
    const cpeHandler = new CPEIngester(persistor, infosPersistor);
    await cpeHandler.update();
    await persistor.close();
  }

  async populateCVE(props?: UpdateProps) {
    const cpePersistor = await this.getCPEPersistor();
    await cpePersistor.open();

    const cvePersistor = await this.getCVEPersistor();
    await cpePersistor.open();

    const infoPersistor = await this.factory.make(
      this.databaseName,
      cveInfosCollectionName,
      (infos: CVEInfos) => ({ id: infos.id }),
    );
    await cpePersistor.open();

    const oldInfoPersistor = await this.getOldCompatCveInfoPersistor();

    const cveHandler = new CVEIngester(
      cvePersistor,
      cpePersistor,
      infoPersistor,
      oldInfoPersistor,
      this.db,
    );
    await cveHandler.populateCves(props);

    cvePersistor.close(); // closing the client so no need to close others but no clean
    // cpePersistor.close();
    // infoPersistor.close();
  }
}
